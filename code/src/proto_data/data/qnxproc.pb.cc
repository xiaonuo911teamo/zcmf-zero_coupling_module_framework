// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qnxproc.proto

#include "qnxproc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_qnxproc_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_qnxproc_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_QnxProcStatus;
}  // namespace protobuf_qnxproc_2eproto
class QnxProcStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QnxProcStatus>
      _instance;
} _QnxProcStatus_default_instance_;
class QnxProcListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QnxProcList>
      _instance;
} _QnxProcList_default_instance_;
namespace protobuf_qnxproc_2eproto {
static void InitDefaultsQnxProcStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QnxProcStatus_default_instance_;
    new (ptr) ::QnxProcStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QnxProcStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_QnxProcStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQnxProcStatus}, {}};

static void InitDefaultsQnxProcList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QnxProcList_default_instance_;
    new (ptr) ::QnxProcList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QnxProcList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_QnxProcList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsQnxProcList}, {
      &protobuf_qnxproc_2eproto::scc_info_QnxProcStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_QnxProcStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_QnxProcList.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, cpuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, policy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, mem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, cpu_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, proc_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcStatus, thread_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, cpu_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, cpu_kernel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, cpu_idle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, mem_avail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, mem_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::QnxProcList, proc_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::QnxProcStatus)},
  { 14, -1, sizeof(::QnxProcList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_QnxProcStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_QnxProcList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "qnxproc.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rqnxproc.proto\"\241\001\n\rQnxProcStatus\022\013\n\003pid"
      "\030\001 \001(\003\022\013\n\003tid\030\002 \001(\003\022\r\n\005cpuid\030\003 \001(\003\022\020\n\010pr"
      "iority\030\004 \001(\003\022\016\n\006policy\030\005 \001(\t\022\013\n\003mem\030\006 \001("
      "\003\022\020\n\010cpu_used\030\007 \001(\002\022\021\n\tproc_name\030\010 \001(\t\022\023"
      "\n\013thread_name\030\t \001(\t\"\241\001\n\013QnxProcList\022\021\n\tt"
      "imestamp\030\001 \001(\003\022\020\n\010cpu_user\030\003 \001(\002\022\022\n\ncpu_"
      "kernel\030\004 \001(\002\022\020\n\010cpu_idle\030\005 \003(\002\022\021\n\tmem_av"
      "ail\030\006 \001(\003\022\021\n\tmem_total\030\007 \001(\003\022!\n\tproc_lis"
      "t\030\010 \003(\0132\016.QnxProcStatusb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qnxproc.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_qnxproc_2eproto

// ===================================================================

void QnxProcStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QnxProcStatus::kPidFieldNumber;
const int QnxProcStatus::kTidFieldNumber;
const int QnxProcStatus::kCpuidFieldNumber;
const int QnxProcStatus::kPriorityFieldNumber;
const int QnxProcStatus::kPolicyFieldNumber;
const int QnxProcStatus::kMemFieldNumber;
const int QnxProcStatus::kCpuUsedFieldNumber;
const int QnxProcStatus::kProcNameFieldNumber;
const int QnxProcStatus::kThreadNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QnxProcStatus::QnxProcStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_qnxproc_2eproto::scc_info_QnxProcStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:QnxProcStatus)
}
QnxProcStatus::QnxProcStatus(const QnxProcStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.policy().size() > 0) {
    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  proc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.proc_name().size() > 0) {
    proc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  thread_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.thread_name().size() > 0) {
    thread_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thread_name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_used_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(cpu_used_));
  // @@protoc_insertion_point(copy_constructor:QnxProcStatus)
}

void QnxProcStatus::SharedCtor() {
  policy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_used_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(cpu_used_));
}

QnxProcStatus::~QnxProcStatus() {
  // @@protoc_insertion_point(destructor:QnxProcStatus)
  SharedDtor();
}

void QnxProcStatus::SharedDtor() {
  policy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QnxProcStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QnxProcStatus::descriptor() {
  ::protobuf_qnxproc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qnxproc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QnxProcStatus& QnxProcStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_qnxproc_2eproto::scc_info_QnxProcStatus.base);
  return *internal_default_instance();
}


void QnxProcStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:QnxProcStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  thread_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_used_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(cpu_used_));
  _internal_metadata_.Clear();
}

bool QnxProcStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QnxProcStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cpuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string policy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->policy().data(), static_cast<int>(this->policy().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "QnxProcStatus.policy"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mem = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_used = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proc_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proc_name().data(), static_cast<int>(this->proc_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "QnxProcStatus.proc_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string thread_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thread_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->thread_name().data(), static_cast<int>(this->thread_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "QnxProcStatus.thread_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QnxProcStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QnxProcStatus)
  return false;
#undef DO_
}

void QnxProcStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QnxProcStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->pid(), output);
  }

  // int64 tid = 2;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->tid(), output);
  }

  // int64 cpuid = 3;
  if (this->cpuid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cpuid(), output);
  }

  // int64 priority = 4;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->priority(), output);
  }

  // string policy = 5;
  if (this->policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QnxProcStatus.policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->policy(), output);
  }

  // int64 mem = 6;
  if (this->mem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mem(), output);
  }

  // float cpu_used = 7;
  if (this->cpu_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cpu_used(), output);
  }

  // string proc_name = 8;
  if (this->proc_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proc_name().data(), static_cast<int>(this->proc_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QnxProcStatus.proc_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->proc_name(), output);
  }

  // string thread_name = 9;
  if (this->thread_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thread_name().data(), static_cast<int>(this->thread_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QnxProcStatus.thread_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->thread_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:QnxProcStatus)
}

::google::protobuf::uint8* QnxProcStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QnxProcStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->pid(), target);
  }

  // int64 tid = 2;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->tid(), target);
  }

  // int64 cpuid = 3;
  if (this->cpuid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cpuid(), target);
  }

  // int64 priority = 4;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->priority(), target);
  }

  // string policy = 5;
  if (this->policy().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->policy().data(), static_cast<int>(this->policy().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QnxProcStatus.policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->policy(), target);
  }

  // int64 mem = 6;
  if (this->mem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mem(), target);
  }

  // float cpu_used = 7;
  if (this->cpu_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cpu_used(), target);
  }

  // string proc_name = 8;
  if (this->proc_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proc_name().data(), static_cast<int>(this->proc_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QnxProcStatus.proc_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->proc_name(), target);
  }

  // string thread_name = 9;
  if (this->thread_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->thread_name().data(), static_cast<int>(this->thread_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "QnxProcStatus.thread_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->thread_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QnxProcStatus)
  return target;
}

size_t QnxProcStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QnxProcStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string policy = 5;
  if (this->policy().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->policy());
  }

  // string proc_name = 8;
  if (this->proc_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proc_name());
  }

  // string thread_name = 9;
  if (this->thread_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->thread_name());
  }

  // int64 pid = 1;
  if (this->pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->pid());
  }

  // int64 tid = 2;
  if (this->tid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tid());
  }

  // int64 cpuid = 3;
  if (this->cpuid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpuid());
  }

  // int64 priority = 4;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->priority());
  }

  // int64 mem = 6;
  if (this->mem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem());
  }

  // float cpu_used = 7;
  if (this->cpu_used() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QnxProcStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QnxProcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const QnxProcStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QnxProcStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QnxProcStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QnxProcStatus)
    MergeFrom(*source);
  }
}

void QnxProcStatus::MergeFrom(const QnxProcStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QnxProcStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.policy().size() > 0) {

    policy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.policy_);
  }
  if (from.proc_name().size() > 0) {

    proc_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_name_);
  }
  if (from.thread_name().size() > 0) {

    thread_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.thread_name_);
  }
  if (from.pid() != 0) {
    set_pid(from.pid());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
  if (from.cpuid() != 0) {
    set_cpuid(from.cpuid());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.mem() != 0) {
    set_mem(from.mem());
  }
  if (from.cpu_used() != 0) {
    set_cpu_used(from.cpu_used());
  }
}

void QnxProcStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QnxProcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QnxProcStatus::CopyFrom(const QnxProcStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QnxProcStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QnxProcStatus::IsInitialized() const {
  return true;
}

void QnxProcStatus::Swap(QnxProcStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QnxProcStatus::InternalSwap(QnxProcStatus* other) {
  using std::swap;
  policy_.Swap(&other->policy_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proc_name_.Swap(&other->proc_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thread_name_.Swap(&other->thread_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(cpuid_, other->cpuid_);
  swap(priority_, other->priority_);
  swap(mem_, other->mem_);
  swap(cpu_used_, other->cpu_used_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QnxProcStatus::GetMetadata() const {
  protobuf_qnxproc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qnxproc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QnxProcList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QnxProcList::kTimestampFieldNumber;
const int QnxProcList::kCpuUserFieldNumber;
const int QnxProcList::kCpuKernelFieldNumber;
const int QnxProcList::kCpuIdleFieldNumber;
const int QnxProcList::kMemAvailFieldNumber;
const int QnxProcList::kMemTotalFieldNumber;
const int QnxProcList::kProcListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QnxProcList::QnxProcList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_qnxproc_2eproto::scc_info_QnxProcList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:QnxProcList)
}
QnxProcList::QnxProcList(const QnxProcList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cpu_idle_(from.cpu_idle_),
      proc_list_(from.proc_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_total_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(mem_total_));
  // @@protoc_insertion_point(copy_constructor:QnxProcList)
}

void QnxProcList::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_total_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(mem_total_));
}

QnxProcList::~QnxProcList() {
  // @@protoc_insertion_point(destructor:QnxProcList)
  SharedDtor();
}

void QnxProcList::SharedDtor() {
}

void QnxProcList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* QnxProcList::descriptor() {
  ::protobuf_qnxproc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qnxproc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QnxProcList& QnxProcList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_qnxproc_2eproto::scc_info_QnxProcList.base);
  return *internal_default_instance();
}


void QnxProcList::Clear() {
// @@protoc_insertion_point(message_clear_start:QnxProcList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_idle_.Clear();
  proc_list_.Clear();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_total_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(mem_total_));
  _internal_metadata_.Clear();
}

bool QnxProcList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:QnxProcList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float cpu_kernel = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_kernel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float cpu_idle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_cpu_idle())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_cpu_idle())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mem_avail = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_avail_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mem_total = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .QnxProcStatus proc_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_proc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:QnxProcList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:QnxProcList)
  return false;
#undef DO_
}

void QnxProcList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:QnxProcList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // float cpu_user = 3;
  if (this->cpu_user() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cpu_user(), output);
  }

  // float cpu_kernel = 4;
  if (this->cpu_kernel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cpu_kernel(), output);
  }

  // repeated float cpu_idle = 5;
  if (this->cpu_idle_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cpu_idle_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->cpu_idle().data(), this->cpu_idle_size(), output);
  }

  // int64 mem_avail = 6;
  if (this->mem_avail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mem_avail(), output);
  }

  // int64 mem_total = 7;
  if (this->mem_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->mem_total(), output);
  }

  // repeated .QnxProcStatus proc_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proc_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->proc_list(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:QnxProcList)
}

::google::protobuf::uint8* QnxProcList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:QnxProcList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // float cpu_user = 3;
  if (this->cpu_user() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cpu_user(), target);
  }

  // float cpu_kernel = 4;
  if (this->cpu_kernel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cpu_kernel(), target);
  }

  // repeated float cpu_idle = 5;
  if (this->cpu_idle_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _cpu_idle_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->cpu_idle_, target);
  }

  // int64 mem_avail = 6;
  if (this->mem_avail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mem_avail(), target);
  }

  // int64 mem_total = 7;
  if (this->mem_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->mem_total(), target);
  }

  // repeated .QnxProcStatus proc_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->proc_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->proc_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QnxProcList)
  return target;
}

size_t QnxProcList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QnxProcList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated float cpu_idle = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_idle_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cpu_idle_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .QnxProcStatus proc_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->proc_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->proc_list(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // float cpu_user = 3;
  if (this->cpu_user() != 0) {
    total_size += 1 + 4;
  }

  // float cpu_kernel = 4;
  if (this->cpu_kernel() != 0) {
    total_size += 1 + 4;
  }

  // int64 mem_avail = 6;
  if (this->mem_avail() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_avail());
  }

  // int64 mem_total = 7;
  if (this->mem_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_total());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QnxProcList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QnxProcList)
  GOOGLE_DCHECK_NE(&from, this);
  const QnxProcList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QnxProcList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QnxProcList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QnxProcList)
    MergeFrom(*source);
  }
}

void QnxProcList::MergeFrom(const QnxProcList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QnxProcList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cpu_idle_.MergeFrom(from.cpu_idle_);
  proc_list_.MergeFrom(from.proc_list_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.cpu_user() != 0) {
    set_cpu_user(from.cpu_user());
  }
  if (from.cpu_kernel() != 0) {
    set_cpu_kernel(from.cpu_kernel());
  }
  if (from.mem_avail() != 0) {
    set_mem_avail(from.mem_avail());
  }
  if (from.mem_total() != 0) {
    set_mem_total(from.mem_total());
  }
}

void QnxProcList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QnxProcList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QnxProcList::CopyFrom(const QnxProcList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QnxProcList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QnxProcList::IsInitialized() const {
  return true;
}

void QnxProcList::Swap(QnxProcList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QnxProcList::InternalSwap(QnxProcList* other) {
  using std::swap;
  cpu_idle_.InternalSwap(&other->cpu_idle_);
  CastToBase(&proc_list_)->InternalSwap(CastToBase(&other->proc_list_));
  swap(timestamp_, other->timestamp_);
  swap(cpu_user_, other->cpu_user_);
  swap(cpu_kernel_, other->cpu_kernel_);
  swap(mem_avail_, other->mem_avail_);
  swap(mem_total_, other->mem_total_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata QnxProcList::GetMetadata() const {
  protobuf_qnxproc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_qnxproc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::QnxProcStatus* Arena::CreateMaybeMessage< ::QnxProcStatus >(Arena* arena) {
  return Arena::CreateInternal< ::QnxProcStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::QnxProcList* Arena::CreateMaybeMessage< ::QnxProcList >(Arena* arena) {
  return Arena::CreateInternal< ::QnxProcList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
