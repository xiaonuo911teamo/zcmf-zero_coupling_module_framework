// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qnxproc.proto

#ifndef PROTOBUF_INCLUDED_qnxproc_2eproto
#define PROTOBUF_INCLUDED_qnxproc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_qnxproc_2eproto 

namespace protobuf_qnxproc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_qnxproc_2eproto
class QnxProcList;
class QnxProcListDefaultTypeInternal;
extern QnxProcListDefaultTypeInternal _QnxProcList_default_instance_;
class QnxProcStatus;
class QnxProcStatusDefaultTypeInternal;
extern QnxProcStatusDefaultTypeInternal _QnxProcStatus_default_instance_;
namespace google {
namespace protobuf {
template<> ::QnxProcList* Arena::CreateMaybeMessage<::QnxProcList>(Arena*);
template<> ::QnxProcStatus* Arena::CreateMaybeMessage<::QnxProcStatus>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class QnxProcStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QnxProcStatus) */ {
 public:
  QnxProcStatus();
  virtual ~QnxProcStatus();

  QnxProcStatus(const QnxProcStatus& from);

  inline QnxProcStatus& operator=(const QnxProcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QnxProcStatus(QnxProcStatus&& from) noexcept
    : QnxProcStatus() {
    *this = ::std::move(from);
  }

  inline QnxProcStatus& operator=(QnxProcStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QnxProcStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QnxProcStatus* internal_default_instance() {
    return reinterpret_cast<const QnxProcStatus*>(
               &_QnxProcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(QnxProcStatus* other);
  friend void swap(QnxProcStatus& a, QnxProcStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QnxProcStatus* New() const final {
    return CreateMaybeMessage<QnxProcStatus>(NULL);
  }

  QnxProcStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QnxProcStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QnxProcStatus& from);
  void MergeFrom(const QnxProcStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QnxProcStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string policy = 5;
  void clear_policy();
  static const int kPolicyFieldNumber = 5;
  const ::std::string& policy() const;
  void set_policy(const ::std::string& value);
  #if LANG_CXX11
  void set_policy(::std::string&& value);
  #endif
  void set_policy(const char* value);
  void set_policy(const char* value, size_t size);
  ::std::string* mutable_policy();
  ::std::string* release_policy();
  void set_allocated_policy(::std::string* policy);

  // string proc_name = 8;
  void clear_proc_name();
  static const int kProcNameFieldNumber = 8;
  const ::std::string& proc_name() const;
  void set_proc_name(const ::std::string& value);
  #if LANG_CXX11
  void set_proc_name(::std::string&& value);
  #endif
  void set_proc_name(const char* value);
  void set_proc_name(const char* value, size_t size);
  ::std::string* mutable_proc_name();
  ::std::string* release_proc_name();
  void set_allocated_proc_name(::std::string* proc_name);

  // string thread_name = 9;
  void clear_thread_name();
  static const int kThreadNameFieldNumber = 9;
  const ::std::string& thread_name() const;
  void set_thread_name(const ::std::string& value);
  #if LANG_CXX11
  void set_thread_name(::std::string&& value);
  #endif
  void set_thread_name(const char* value);
  void set_thread_name(const char* value, size_t size);
  ::std::string* mutable_thread_name();
  ::std::string* release_thread_name();
  void set_allocated_thread_name(::std::string* thread_name);

  // int64 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int64 pid() const;
  void set_pid(::google::protobuf::int64 value);

  // int64 tid = 2;
  void clear_tid();
  static const int kTidFieldNumber = 2;
  ::google::protobuf::int64 tid() const;
  void set_tid(::google::protobuf::int64 value);

  // int64 cpuid = 3;
  void clear_cpuid();
  static const int kCpuidFieldNumber = 3;
  ::google::protobuf::int64 cpuid() const;
  void set_cpuid(::google::protobuf::int64 value);

  // int64 priority = 4;
  void clear_priority();
  static const int kPriorityFieldNumber = 4;
  ::google::protobuf::int64 priority() const;
  void set_priority(::google::protobuf::int64 value);

  // int64 mem = 6;
  void clear_mem();
  static const int kMemFieldNumber = 6;
  ::google::protobuf::int64 mem() const;
  void set_mem(::google::protobuf::int64 value);

  // float cpu_used = 7;
  void clear_cpu_used();
  static const int kCpuUsedFieldNumber = 7;
  float cpu_used() const;
  void set_cpu_used(float value);

  // @@protoc_insertion_point(class_scope:QnxProcStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr policy_;
  ::google::protobuf::internal::ArenaStringPtr proc_name_;
  ::google::protobuf::internal::ArenaStringPtr thread_name_;
  ::google::protobuf::int64 pid_;
  ::google::protobuf::int64 tid_;
  ::google::protobuf::int64 cpuid_;
  ::google::protobuf::int64 priority_;
  ::google::protobuf::int64 mem_;
  float cpu_used_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qnxproc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QnxProcList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QnxProcList) */ {
 public:
  QnxProcList();
  virtual ~QnxProcList();

  QnxProcList(const QnxProcList& from);

  inline QnxProcList& operator=(const QnxProcList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QnxProcList(QnxProcList&& from) noexcept
    : QnxProcList() {
    *this = ::std::move(from);
  }

  inline QnxProcList& operator=(QnxProcList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QnxProcList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QnxProcList* internal_default_instance() {
    return reinterpret_cast<const QnxProcList*>(
               &_QnxProcList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QnxProcList* other);
  friend void swap(QnxProcList& a, QnxProcList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QnxProcList* New() const final {
    return CreateMaybeMessage<QnxProcList>(NULL);
  }

  QnxProcList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QnxProcList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QnxProcList& from);
  void MergeFrom(const QnxProcList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QnxProcList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float cpu_idle = 5;
  int cpu_idle_size() const;
  void clear_cpu_idle();
  static const int kCpuIdleFieldNumber = 5;
  float cpu_idle(int index) const;
  void set_cpu_idle(int index, float value);
  void add_cpu_idle(float value);
  const ::google::protobuf::RepeatedField< float >&
      cpu_idle() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_cpu_idle();

  // repeated .QnxProcStatus proc_list = 8;
  int proc_list_size() const;
  void clear_proc_list();
  static const int kProcListFieldNumber = 8;
  ::QnxProcStatus* mutable_proc_list(int index);
  ::google::protobuf::RepeatedPtrField< ::QnxProcStatus >*
      mutable_proc_list();
  const ::QnxProcStatus& proc_list(int index) const;
  ::QnxProcStatus* add_proc_list();
  const ::google::protobuf::RepeatedPtrField< ::QnxProcStatus >&
      proc_list() const;

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // float cpu_user = 3;
  void clear_cpu_user();
  static const int kCpuUserFieldNumber = 3;
  float cpu_user() const;
  void set_cpu_user(float value);

  // float cpu_kernel = 4;
  void clear_cpu_kernel();
  static const int kCpuKernelFieldNumber = 4;
  float cpu_kernel() const;
  void set_cpu_kernel(float value);

  // int64 mem_avail = 6;
  void clear_mem_avail();
  static const int kMemAvailFieldNumber = 6;
  ::google::protobuf::int64 mem_avail() const;
  void set_mem_avail(::google::protobuf::int64 value);

  // int64 mem_total = 7;
  void clear_mem_total();
  static const int kMemTotalFieldNumber = 7;
  ::google::protobuf::int64 mem_total() const;
  void set_mem_total(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:QnxProcList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > cpu_idle_;
  mutable int _cpu_idle_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::QnxProcStatus > proc_list_;
  ::google::protobuf::int64 timestamp_;
  float cpu_user_;
  float cpu_kernel_;
  ::google::protobuf::int64 mem_avail_;
  ::google::protobuf::int64 mem_total_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_qnxproc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QnxProcStatus

// int64 pid = 1;
inline void QnxProcStatus::clear_pid() {
  pid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcStatus::pid() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.pid)
  return pid_;
}
inline void QnxProcStatus::set_pid(::google::protobuf::int64 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:QnxProcStatus.pid)
}

// int64 tid = 2;
inline void QnxProcStatus::clear_tid() {
  tid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcStatus::tid() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.tid)
  return tid_;
}
inline void QnxProcStatus::set_tid(::google::protobuf::int64 value) {
  
  tid_ = value;
  // @@protoc_insertion_point(field_set:QnxProcStatus.tid)
}

// int64 cpuid = 3;
inline void QnxProcStatus::clear_cpuid() {
  cpuid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcStatus::cpuid() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.cpuid)
  return cpuid_;
}
inline void QnxProcStatus::set_cpuid(::google::protobuf::int64 value) {
  
  cpuid_ = value;
  // @@protoc_insertion_point(field_set:QnxProcStatus.cpuid)
}

// int64 priority = 4;
inline void QnxProcStatus::clear_priority() {
  priority_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcStatus::priority() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.priority)
  return priority_;
}
inline void QnxProcStatus::set_priority(::google::protobuf::int64 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:QnxProcStatus.priority)
}

// string policy = 5;
inline void QnxProcStatus::clear_policy() {
  policy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QnxProcStatus::policy() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.policy)
  return policy_.GetNoArena();
}
inline void QnxProcStatus::set_policy(const ::std::string& value) {
  
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QnxProcStatus.policy)
}
#if LANG_CXX11
inline void QnxProcStatus::set_policy(::std::string&& value) {
  
  policy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QnxProcStatus.policy)
}
#endif
inline void QnxProcStatus::set_policy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QnxProcStatus.policy)
}
inline void QnxProcStatus::set_policy(const char* value, size_t size) {
  
  policy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QnxProcStatus.policy)
}
inline ::std::string* QnxProcStatus::mutable_policy() {
  
  // @@protoc_insertion_point(field_mutable:QnxProcStatus.policy)
  return policy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QnxProcStatus::release_policy() {
  // @@protoc_insertion_point(field_release:QnxProcStatus.policy)
  
  return policy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QnxProcStatus::set_allocated_policy(::std::string* policy) {
  if (policy != NULL) {
    
  } else {
    
  }
  policy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), policy);
  // @@protoc_insertion_point(field_set_allocated:QnxProcStatus.policy)
}

// int64 mem = 6;
inline void QnxProcStatus::clear_mem() {
  mem_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcStatus::mem() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.mem)
  return mem_;
}
inline void QnxProcStatus::set_mem(::google::protobuf::int64 value) {
  
  mem_ = value;
  // @@protoc_insertion_point(field_set:QnxProcStatus.mem)
}

// float cpu_used = 7;
inline void QnxProcStatus::clear_cpu_used() {
  cpu_used_ = 0;
}
inline float QnxProcStatus::cpu_used() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.cpu_used)
  return cpu_used_;
}
inline void QnxProcStatus::set_cpu_used(float value) {
  
  cpu_used_ = value;
  // @@protoc_insertion_point(field_set:QnxProcStatus.cpu_used)
}

// string proc_name = 8;
inline void QnxProcStatus::clear_proc_name() {
  proc_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QnxProcStatus::proc_name() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.proc_name)
  return proc_name_.GetNoArena();
}
inline void QnxProcStatus::set_proc_name(const ::std::string& value) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QnxProcStatus.proc_name)
}
#if LANG_CXX11
inline void QnxProcStatus::set_proc_name(::std::string&& value) {
  
  proc_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QnxProcStatus.proc_name)
}
#endif
inline void QnxProcStatus::set_proc_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QnxProcStatus.proc_name)
}
inline void QnxProcStatus::set_proc_name(const char* value, size_t size) {
  
  proc_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QnxProcStatus.proc_name)
}
inline ::std::string* QnxProcStatus::mutable_proc_name() {
  
  // @@protoc_insertion_point(field_mutable:QnxProcStatus.proc_name)
  return proc_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QnxProcStatus::release_proc_name() {
  // @@protoc_insertion_point(field_release:QnxProcStatus.proc_name)
  
  return proc_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QnxProcStatus::set_allocated_proc_name(::std::string* proc_name) {
  if (proc_name != NULL) {
    
  } else {
    
  }
  proc_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_name);
  // @@protoc_insertion_point(field_set_allocated:QnxProcStatus.proc_name)
}

// string thread_name = 9;
inline void QnxProcStatus::clear_thread_name() {
  thread_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QnxProcStatus::thread_name() const {
  // @@protoc_insertion_point(field_get:QnxProcStatus.thread_name)
  return thread_name_.GetNoArena();
}
inline void QnxProcStatus::set_thread_name(const ::std::string& value) {
  
  thread_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:QnxProcStatus.thread_name)
}
#if LANG_CXX11
inline void QnxProcStatus::set_thread_name(::std::string&& value) {
  
  thread_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QnxProcStatus.thread_name)
}
#endif
inline void QnxProcStatus::set_thread_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thread_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QnxProcStatus.thread_name)
}
inline void QnxProcStatus::set_thread_name(const char* value, size_t size) {
  
  thread_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QnxProcStatus.thread_name)
}
inline ::std::string* QnxProcStatus::mutable_thread_name() {
  
  // @@protoc_insertion_point(field_mutable:QnxProcStatus.thread_name)
  return thread_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QnxProcStatus::release_thread_name() {
  // @@protoc_insertion_point(field_release:QnxProcStatus.thread_name)
  
  return thread_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QnxProcStatus::set_allocated_thread_name(::std::string* thread_name) {
  if (thread_name != NULL) {
    
  } else {
    
  }
  thread_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread_name);
  // @@protoc_insertion_point(field_set_allocated:QnxProcStatus.thread_name)
}

// -------------------------------------------------------------------

// QnxProcList

// int64 timestamp = 1;
inline void QnxProcList::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcList::timestamp() const {
  // @@protoc_insertion_point(field_get:QnxProcList.timestamp)
  return timestamp_;
}
inline void QnxProcList::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:QnxProcList.timestamp)
}

// float cpu_user = 3;
inline void QnxProcList::clear_cpu_user() {
  cpu_user_ = 0;
}
inline float QnxProcList::cpu_user() const {
  // @@protoc_insertion_point(field_get:QnxProcList.cpu_user)
  return cpu_user_;
}
inline void QnxProcList::set_cpu_user(float value) {
  
  cpu_user_ = value;
  // @@protoc_insertion_point(field_set:QnxProcList.cpu_user)
}

// float cpu_kernel = 4;
inline void QnxProcList::clear_cpu_kernel() {
  cpu_kernel_ = 0;
}
inline float QnxProcList::cpu_kernel() const {
  // @@protoc_insertion_point(field_get:QnxProcList.cpu_kernel)
  return cpu_kernel_;
}
inline void QnxProcList::set_cpu_kernel(float value) {
  
  cpu_kernel_ = value;
  // @@protoc_insertion_point(field_set:QnxProcList.cpu_kernel)
}

// repeated float cpu_idle = 5;
inline int QnxProcList::cpu_idle_size() const {
  return cpu_idle_.size();
}
inline void QnxProcList::clear_cpu_idle() {
  cpu_idle_.Clear();
}
inline float QnxProcList::cpu_idle(int index) const {
  // @@protoc_insertion_point(field_get:QnxProcList.cpu_idle)
  return cpu_idle_.Get(index);
}
inline void QnxProcList::set_cpu_idle(int index, float value) {
  cpu_idle_.Set(index, value);
  // @@protoc_insertion_point(field_set:QnxProcList.cpu_idle)
}
inline void QnxProcList::add_cpu_idle(float value) {
  cpu_idle_.Add(value);
  // @@protoc_insertion_point(field_add:QnxProcList.cpu_idle)
}
inline const ::google::protobuf::RepeatedField< float >&
QnxProcList::cpu_idle() const {
  // @@protoc_insertion_point(field_list:QnxProcList.cpu_idle)
  return cpu_idle_;
}
inline ::google::protobuf::RepeatedField< float >*
QnxProcList::mutable_cpu_idle() {
  // @@protoc_insertion_point(field_mutable_list:QnxProcList.cpu_idle)
  return &cpu_idle_;
}

// int64 mem_avail = 6;
inline void QnxProcList::clear_mem_avail() {
  mem_avail_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcList::mem_avail() const {
  // @@protoc_insertion_point(field_get:QnxProcList.mem_avail)
  return mem_avail_;
}
inline void QnxProcList::set_mem_avail(::google::protobuf::int64 value) {
  
  mem_avail_ = value;
  // @@protoc_insertion_point(field_set:QnxProcList.mem_avail)
}

// int64 mem_total = 7;
inline void QnxProcList::clear_mem_total() {
  mem_total_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 QnxProcList::mem_total() const {
  // @@protoc_insertion_point(field_get:QnxProcList.mem_total)
  return mem_total_;
}
inline void QnxProcList::set_mem_total(::google::protobuf::int64 value) {
  
  mem_total_ = value;
  // @@protoc_insertion_point(field_set:QnxProcList.mem_total)
}

// repeated .QnxProcStatus proc_list = 8;
inline int QnxProcList::proc_list_size() const {
  return proc_list_.size();
}
inline void QnxProcList::clear_proc_list() {
  proc_list_.Clear();
}
inline ::QnxProcStatus* QnxProcList::mutable_proc_list(int index) {
  // @@protoc_insertion_point(field_mutable:QnxProcList.proc_list)
  return proc_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::QnxProcStatus >*
QnxProcList::mutable_proc_list() {
  // @@protoc_insertion_point(field_mutable_list:QnxProcList.proc_list)
  return &proc_list_;
}
inline const ::QnxProcStatus& QnxProcList::proc_list(int index) const {
  // @@protoc_insertion_point(field_get:QnxProcList.proc_list)
  return proc_list_.Get(index);
}
inline ::QnxProcStatus* QnxProcList::add_proc_list() {
  // @@protoc_insertion_point(field_add:QnxProcList.proc_list)
  return proc_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QnxProcStatus >&
QnxProcList::proc_list() const {
  // @@protoc_insertion_point(field_list:QnxProcList.proc_list)
  return proc_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_qnxproc_2eproto
